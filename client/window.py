# client/window.py
import glfw
from OpenGL.GL import *
import sys
import imgui
# Importa o backend GlfwRenderer. Este √© o ponto chave.
# Se o import falhar, significa que `imgui` ou o backend espec√≠fico n√£o est√° instalado corretamente.
from imgui.integrations.glfw import GlfwRenderer
# Corrigir a importa√ß√£o do glm tamb√©m
from pyglm import glm


class Janela:
    def __init__(self, title="Global Arena"):
        self.title = title
        self.window = None
        self.monitor = None
        self.imgui_impl = None  # Vai armazenar o backend do ImGui

        # Inicializa o GLFW
        if not glfw.init():
            raise Exception("Falha ao inicializar o GLFW")

        # Configura√ß√µes da janela (OpenGL 3.3 Core Profile)
        glfw.window_hint(glfw.CONTEXT_VERSION_MAJOR, 3)
        glfw.window_hint(glfw.CONTEXT_VERSION_MINOR, 3)
        glfw.window_hint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)
        glfw.window_hint(glfw.OPENGL_FORWARD_COMPAT, True)  # Necess√°rio no macOS

        # Modo fullscreen com resolu√ß√£o nativa
        self.monitor = glfw.get_primary_monitor()
        mode = glfw.get_video_mode(self.monitor)
        self.width = mode.size.width
        self.height = mode.size.height

        # Criar janela em fullscreen
        self.window = glfw.create_window(self.width, self.height, self.title, self.monitor, None)
        if not self.window:
            glfw.terminate()
            raise Exception("Falha ao criar a janela")

        # Tornar o contexto OpenGL atual
        glfw.make_context_current(self.window)

        # === INICIALIZA√á√ÉO DO DEAR IMGUI ===
        # 1. Criar contexto do ImGui
        imgui.create_context()
        # 2. Criar o backend de renderiza√ß√£o.
        # Usando attach_callbacks=True (padr√£o) para que ele gerencie os callbacks automaticamente.
        # Isso elimina a necessidade de chamar manualmente imgui_impl.algum_callback.
        self.imgui_impl = GlfwRenderer(self.window, attach_callbacks=True)

        # === CALLBACKS (apenas os espec√≠ficos da sua aplica√ß√£o, se necess√°rio) ===
        # Capturar teclado (para ESC). O ImGui receber√° os eventos automaticamente.
        glfw.set_key_callback(self.window, self._key_callback)
        # Se voc√™ precisar de callbacks adicionais para l√≥gica espec√≠fica (al√©m do ImGui),
        # pode adicion√°-los aqui. Mas os b√°sicos (mouse, teclado) s√£o tratados pelo backend.

        # Habilitar vsync
        glfw.swap_interval(1)

        # Estados de input (opcional, pode ser simplificado ou removido se usar ImGui para input)
        # Se voc√™ n√£o usar mais esses estados, pode remov√™-los.
        self.keys = {}
        self.mouse_b1_pressed = False
        self.mouse_x = 0.0
        self.mouse_y = 0.0

        # === ESCALA E PROJE√á√ÉO ===
        self.base_resolution = (1600, 900)
        self.scale = self.width / self.base_resolution[0]
        self.projection_matrix = glm.ortho(
            0.0, float(self.width),
            float(self.height), 0.0,
            -1.0, 1.0
        )

        self.ui_sidebar_width = 320  # Largura das barras laterais
        self.ui_toolbar_height = 30  # Altura das barras superior e inferior

        print(f"üéÆ Janela criada em fullscreen: {self.width}x{self.height}")
        print(f"üìê Escala de UI: {self.scale:.2f}x (base: {self.base_resolution[0]}x{self.base_resolution[1]})")
        print("üé® Dear ImGui inicializado.")

    # === CALLBACKS PARA L√ìGICA ESPEC√çFICA DA APLICA√á√ÉO ===
    # O backend do ImGui j√° est√° ouvindo esses eventos.
    def _key_callback(self, window, key, scancode, action, mods):
        """Callback para teclas ‚Äî fecha com ESC"""
        # L√≥gica espec√≠fica da sua aplica√ß√£o
        if key == glfw.KEY_ESCAPE and action == glfw.PRESS:
            glfw.set_window_should_close(window, True)

    # Se voc√™ n√£o precisar mais desses callbacks para l√≥gica pr√≥pria, pode remov√™-los.
    # O backend do ImGui os trata.
    # def _mouse_position_callback(self, window, xpos, ypos):
    #     """Atualiza posi√ß√£o do mouse"""
    #     # O ImGui j√° processa isso. Se precisar para l√≥gica pr√≥pria:
    #     self.mouse_x = xpos
    #     self.mouse_y = self.height - ypos  # Inverte Y: 0 no topo

    # def _mouse_button_callback(self, window, button, action, mods):
    #     """Detecta clique do bot√£o esquerdo"""
    #     # O ImGui j√° processa isso. Se precisar para l√≥gica pr√≥pria:
    #     if button == glfw.MOUSE_BUTTON_LEFT:
    #         self.mouse_b1_pressed = (action == glfw.PRESS)

    # === M√âTODOS PARA INTEGRAR IMGUI NO LOOP ===
    def processar_eventos(self):
        """Processa eventos do GLFW e inicia o frame do ImGui"""
        # O backend do ImGui (com attach_callbacks=True) j√° processou os eventos de input.
        glfw.poll_events()
        # Inicia um novo frame do ImGui
        if self.imgui_impl:
            # self.imgui_impl.process_inputs() # Geralmente chamado internamente por new_frame no backend
            imgui.new_frame()

    def trocar_buffers(self):
        """Renderiza a interface ImGui e troca os buffers"""
        # Finaliza o frame do ImGui e obt√©m os dados de renderiza√ß√£o
        imgui.render()
        if self.imgui_impl:
            # O backend desenha a interface ImGui usando OpenGL
            self.imgui_impl.render(imgui.get_draw_data())

        glfw.swap_buffers(self.window)

    # === FINALIZA√á√ÉO ===
    def terminar(self):
        """Libera recursos do GLFW e do ImGui"""
        # Limpa o backend do ImGui primeiro.
        # O shutdown do backend geralmente cuida da destrui√ß√£o do contexto imgui.
        if self.imgui_impl:
            self.imgui_impl.shutdown()
            # Definir como None para evitar uso acidental ap√≥s shutdown
            self.imgui_impl = None

            # O imgui.destroy_context() pode n√£o ser necess√°rio se o backend j√° cuidou disso.
        # Mas, para garantir (e evitar o erro se o backend n√£o tiver feito),
        # podemos verificar se o contexto ainda √© v√°lido antes de destru√≠-lo.
        # No entanto, a forma mais segura √© confiar no backend e N√ÉO chamar
        # imgui.destroy_context() manualmente neste ponto.
        #
        # Se voc√™ quiser ser expl√≠cito, pode fazer uma verifica√ß√£o, mas geralmente
        # n√£o √© necess√°ria:
        # contexto_atual = imgui.get_current_context()
        # if contexto_atual is not None:
        #     imgui.destroy_context(contexto_atual) # Destroi o contexto espec√≠fico

        # Libera recursos do GLFW
        if self.window:
            glfw.destroy_window(self.window)
            self.window = None  # Boa pr√°tica
        glfw.terminate()

    # --- M√©todos de utilidade para renderiza√ß√£o (sem altera√ß√µes) ---
    # Mantenha esses m√©todos conforme sua necessidade.
    def definir_viewport(self):
        glViewport(0, 0, self.width, self.height)

    def limpar_tela(self, r=0.1, g=0.1, b=0.4, a=1.0):
        glClearColor(r, g, b, a)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    def habilitar_depth_test(self):
        glEnable(GL_DEPTH_TEST)

    def desabilitar_depth_test(self):
        glDisable(GL_DEPTH_TEST)

    def habilitar_blend(self):
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

    def desabilitar_blend(self):
        glDisable(GL_BLEND)

    # Se voc√™ removeu os callbacks de mouse/teclado, pode remover esses m√©todos tamb√©m,
    # ou mant√™-los se ainda forem usados para alguma l√≥gica espec√≠fica.
    def get_mouse_position(self):
        """Retorna posi√ß√£o do mouse com origem no canto superior esquerdo"""
        xpos, ypos = glfw.get_cursor_pos(self.window)
        return xpos, self.height - ypos  # Inverte Y

    def is_key_pressed(self, key):
        """Verifica se uma tecla est√° pressionada"""
        return glfw.get_key(self.window, key) == glfw.PRESS

    def deve_fechar(self):  # <-- Adicionado conforme solicitado
        """Verifica se a janela deve ser fechada."""
        return glfw.window_should_close(self.window)

    # === M√âTODO AUXILIAR PARA TESTE ===
    def renderizar_demo_imgui(self):
        """Renderiza a janela de demonstra√ß√£o do ImGui. √ötil para testes."""
        imgui.show_demo_window()
