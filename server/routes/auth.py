# server/routes/auth.py
"""
M√≥dulo de rotas de autentica√ß√£o (login, registro).
Gerencia a inje√ß√£o de depend√™ncia do UserService.
"""
import re
import bcrypt
import unicodedata
from flask import Blueprint, request, jsonify, current_app

# Cria o Blueprint com prefixo
auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

# Vari√°vel global para inje√ß√£o de depend√™ncia
_user_service = None


def normalizar_username(username: str) -> str:
    """
    Normaliza o username: remove acentos, converte para min√∫sculas,
    substitui caracteres especiais por underscores.
    Retorna None se resultar em string vazia.
    """
    if not username:
        return None
    # Remove acentos
    username = unicodedata.normalize('NFKD', username)
    username = ''.join(c for c in username if not unicodedata.combining(c))
    # Substitui n√£o alfanum√©ricos por underscore
    username = re.sub(r'[^a-zA-Z0-9]', '_', username)
    # Min√∫sculas
    username = username.lower()
    # Underscores m√∫ltiplos ‚Üí √∫nico
    username = re.sub(r'_+', '_', username).strip('_')
    return username or None


def register_routes(user_service):
    """
    Fun√ß√£o de inje√ß√£o de depend√™ncia.
    Configura as rotas do auth_bp com o UserService fornecido.
    Deve ser chamada ANTES de registrar o blueprint no app.
    """
    global _user_service
    print(f"üì• DEBUG: Injetando user_service: {user_service}")
    _user_service = user_service

    # Valida se o servi√ßo foi injetado
    if not _user_service:
        print("‚ùå ERRO GRAVE: user_service √© None em register_routes!")
        raise RuntimeError("UserService n√£o injetado em auth_bp.")
    else:
        print(f"‚úÖ DEBUG: _user_service atribu√≠do com sucesso: {_user_service}")


# --- ENDPOINT: Teste de Conex√£o ---
@auth_bp.route('/teste_dynamodb', methods=['GET'])
def teste_dynamodb():
    """Testa a conex√£o com o DynamoDB via UserService."""
    if not _user_service or not _user_service.dynamodb:
        return jsonify({
            "status": "erro",
            "message": "Cliente DynamoDB n√£o dispon√≠vel."
        }), 500

    try:
        response = _user_service.dynamodb.list_tables()
        tabelas = response.get('TableNames', [])
        return jsonify({
            "status": "sucesso",
            "message": "Conex√£o com DynamoDB bem-sucedida.",
            "tabelas": tabelas
        }), 200
    except Exception as e:
        return jsonify({
            "status": "erro",
            "message": f"Falha ao acessar DynamoDB: {str(e)}"
        }), 500


# --- ENDPOINT: Registrar Usu√°rio ---
@auth_bp.route('/registrar', methods=['POST'])
def registrar():
    """
    Registra um novo usu√°rio.
    Expects: {"username": "str", "password": "str"}
    Returns: {"success": bool, "message": str}
    """
    if not request.is_json:
        return jsonify({"success": False, "message": "JSON esperado."}), 400

    data = request.get_json()
    username = data.get('username', '').strip()
    password = data.get('password', '')

    # Validar campos
    if not username or not password:
        return jsonify({"success": False, "message": "Username e senha s√£o obrigat√≥rios."}), 400
    if len(username) < 3:
        return jsonify({"success": False, "message": "Username deve ter pelo menos 3 caracteres."}), 400
    if len(password) < 6:
        return jsonify({"success": False, "message": "Senha deve ter pelo menos 6 caracteres."}), 400

    # Normalizar username (opcional)
    username_normalizado = normalizar_username(username)
    if not username_normalizado:
        return jsonify({"success": False, "message": "Username inv√°lido ap√≥s normaliza√ß√£o."}), 400

    # Verificar se j√° existe (usando o nome original)
    if _user_service.get_user(username):
        return jsonify({"success": False, "message": "Username j√° est√° em uso."}), 409

    # Hashear senha
    try:
        salt = bcrypt.gensalt()
        password_hash = bcrypt.hashpw(password.encode('utf-8'), salt)
    except Exception as e:
        print(f"‚ùå Erro ao hashear senha para '{username}': {e}")
        return jsonify({"success": False, "message": "Erro ao processar senha."}), 500

    # Salvar no DynamoDB
    sucesso = _user_service.create_user_item(username, password_hash=password_hash)
    if sucesso:
        print(f"‚úÖ Usu√°rio '{username}' registrado com sucesso.")
        return jsonify({"success": True, "message": "Usu√°rio registrado com sucesso."}), 201
    else:
        return jsonify({"success": False, "message": "Falha ao salvar no banco."}), 500


# --- ENDPOINT: Login ---
@auth_bp.route('/login', methods=['POST'])
def login():
    """
    Autentica um usu√°rio.
    Expects: {"username": "str", "password": "str"}
    Returns: {"success": bool, "message": str, "token": str (opcional)}
    """
    print("üîç DEBUG: Rota /auth/login foi chamada!")

    # Garantir acesso ao servi√ßo injetado via register_routes
    global _user_service
    if not _user_service:
        print("üí• ERRO: _user_service n√£o foi injetado!")
        return jsonify({
            "success": False,
            "message": "Erro interno do servidor."
        }), 500

    try:
        # 1. Validar formato da requisi√ß√£o
        if not request.is_json:
            print("‚ùå Requisi√ß√£o n√£o √© JSON")
            return jsonify({
                "success": False,
                "message": "JSON esperado."
            }), 400

        data = request.get_json()
        username = data.get('username', '').strip()
        password = data.get('password', '')

        print(f"üîê Tentativa de login - username: {username}")

        # 2. Validar campos obrigat√≥rios
        if not username:
            print("‚ö†Ô∏è Username ausente")
            return jsonify({
                "success": False,
                "message": "Username √© obrigat√≥rio."
            }), 400
        if not password:
            print("‚ö†Ô∏è Senha ausente")
            return jsonify({
                "success": False,
                "message": "Senha √© obrigat√≥ria."
            }), 400

        # 3. Buscar usu√°rio no DynamoDB
        usuario = _user_service.get_user(username)
        if not usuario:
            print(f"‚ùå Credenciais inv√°lidas para '{username}'.")
            return jsonify({
                "success": False,
                "message": "Credenciais inv√°lidas."
            }), 401

        # 4. Extrair e validar hash da senha
        password_hash_attr = usuario.get('password_hash')
        if not password_hash_attr:
            print(f"‚ùå Usu√°rio '{username}' sem password_hash.")
            return jsonify({
                "success": False,
                "message": "Credenciais inv√°lidas."
            }), 401

        # Suporta formato DynamoDB {'B': bytes} ou bytes direto
        stored_hash = password_hash_attr.get('B') if isinstance(password_hash_attr, dict) else password_hash_attr

        if not isinstance(stored_hash, bytes):
            print(f"‚ö†Ô∏è Hash inv√°lido para '{username}': {type(stored_hash)}")
            return jsonify({
                "success": False,
                "message": "Credenciais inv√°lidas."
            }), 401

        # 5. Verificar senha com bcrypt
        if bcrypt.checkpw(password.encode('utf-8'), stored_hash):
            print(f"‚úÖ Login bem-sucedido para '{username}'.")

            # üîê Gera um token fake para compatibilidade com o simulador
            # (Futuro: substituir por JWT real)
            fake_token = f"fake-jwt-{username}-{hash(username) % 10000}"

            return jsonify({
                "success": True,
                "message": "Login bem-sucedido.",
                "token": fake_token  # ‚Üê Adicionado para o simulador usar
            }), 200
        else:
            print(f"‚ùå Senha incorreta para '{username}'.")
            return jsonify({
                "success": False,
                "message": "Credenciais inv√°lidas."
            }), 401

    except Exception as e:
        print(f"üí• ERRO N√ÉO TRATADO em /auth/login: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            "success": False,
            "message": "Erro interno no servidor."
        }), 500