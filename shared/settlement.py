# shared/settlement.py
from math import ceil
from shared.naming import formar_nome


class Assentamento:
    """
    Representa um assentamento, unidade b√°sica de ocupa√ß√£o no mundo.

    Cada assentamento ocupa uma parcela espec√≠fica dentro de um tile:
    - Parcela central (√≠ndice 0)
    - Parcelas perif√©ricas (1‚Äì5 em pent√°gonos, 1‚Äì6 em hex√°gonos)

    A produ√ß√£o real depende de:
    - Coeficiente do bioma (calculado por tile)
    - Popula√ß√£o (homens e mulheres)
    - Fator de g√™nero: homens = 4, mulheres = 2 (unidades de trabalho)
    """

    PARCELA_CENTRAL = 0

    def __init__(self, civilizacao, coordenadas, indice_parcela=None, eh_pentagono=False):
        """
        Inicializa um assentamento.

        :param civilizacao: Civiliza√ß√£o dona do assentamento
        :param coordenadas: Coordenadas do tile (q, r) no grid hexagonal
        :param indice_parcela: √çndice da parcela no tile (0 a 6, ou 0 a 5 se pent√°gono)
                               Se None, usa a parcela central (0)
        :param eh_pentagono: Se True, o tile √© um pent√°gono (5 perif√©ricos)
        """
        self.civilizacao = civilizacao
        self.coordenadas_tile = coordenadas
        self.eh_pentagono = eh_pentagono

        # Validar e definir √≠ndice da parcela
        max_parcelas = 5 if eh_pentagono else 6
        if indice_parcela is None:
            self.indice_parcela = self.PARCELA_CENTRAL
        else:
            if not (0 <= indice_parcela <= max_parcelas):
                raise ValueError(
                    f"√çndice de parcela {indice_parcela} inv√°lido para "
                    f"{'pent√°gono' if eh_pentagono else 'hex√°gono'} em {coordenadas}. "
                    f"Permitido: 0‚Äì{max_parcelas}"
                )
            self.indice_parcela = indice_parcela

        # Nome da cultura
        self.nome = formar_nome(civilizacao.cultura)

        # Popula√ß√£o inicial
        self.homens = 1
        self.mulheres = 1

        # ‚úÖ Coeficiente de produtividade do bioma (ex: 6.0 para Meadow)
        # Ser√° atualizado ao criar e ao avan√ßar turno
        self.coef_produtividade = 0.0

        # ‚úÖ Inicializa o coeficiente
        # (mas o mundo pode n√£o estar pronto ainda ‚Üí ser√° recalculado em atualizar_produtividade)
        # ‚Üí N√£o chame calcular_produtividade_parcela aqui

    def get_populacao_total(self):
        """Retorna a popula√ß√£o total do assentamento."""
        return self.homens + self.mulheres

    def aumentar_populacao(self):
        """
        Aplica crescimento populacional:
        1. Mortalidade: 5% da popula√ß√£o morre (arredondado para baixo: // 20)
        2. Nascimentos: 20% das mulheres geram filhos (arredondado para cima)
        3. Distribui√ß√£o de g√™nero tende a equilibrar.
        """
        # --- 1. MORTALIDADE ---
        mortos_homens = self.homens // 20
        mortos_mulheres = self.mulheres // 20
        self.homens = max(0, self.homens - mortos_homens)
        self.mulheres = max(0, self.mulheres - mortos_mulheres)

        # Se extinto, n√£o h√° crescimento
        if self.get_populacao_total() == 0:
            return

        # --- 2. NASCIMENTOS ---
        nascimentos = int(ceil(self.mulheres * 0.20))

        # --- 3. DISTRIBUI√á√ÉO DE G√äNERO ---
        if self.homens < self.mulheres:
            homens_novos = (nascimentos + 1) // 2
            mulheres_novas = nascimentos // 2
        elif self.mulheres < self.homens:
            mulheres_novas = (nascimentos + 1) // 2
            homens_novos = nascimentos // 2
        else:
            homens_novos = (nascimentos + 1) // 2
            mulheres_novas = nascimentos // 2

        self.homens += homens_novos
        self.mulheres += mulheres_novas

    def eh_parcela_central(self):
        """Verifica se o assentamento est√° na parcela central do tile."""
        return self.indice_parcela == self.PARCELA_CENTRAL

    def eh_parcela_periferica(self):
        """Verifica se o assentamento est√° em uma parcela perif√©rica."""
        return self.indice_parcela >= 1

    def get_tipo_tile(self):
        """Retorna o tipo do tile: 'pent√°gono' ou 'hex√°gono'."""
        return "pent√°gono" if self.eh_pentagono else "hex√°gono"

    @staticmethod
    def calcular_produtividade_parcela(mundo, tile, indice_parcela, eh_pentagono=False):
        """
        Calcula o coeficiente de produ√ß√£o de uma parcela.
        - Central: produtividade do bioma do tile
        - Perif√©rica: m√©dia entre bioma local e do vizinho na dire√ß√£o da parcela

        Usa a topologia real da geografia (grafo NetworkX) com dire√ß√µes expl√≠citas.

        :param mundo: Inst√¢ncia de Mundo
        :param tile: Coordenadas (q, r) do tile
        :param indice_parcela: √çndice da parcela (0 a 6)
        :param eh_pentagono: Se o tile √© pent√°gono (opcional; detectado automaticamente)
        :return: float (0.0 a 6.0)
        """
        G = mundo.planeta.geografia
        prod_base = mundo.ref.produtividade_base

        # Bioma do tile atual
        try:
            bioma_local = G.nodes[tile]['bioma']
            prod_local = prod_base.get(bioma_local, 0.0)
        except KeyError:
            return 0.0

        # 1. Parcela central
        if indice_parcela == Assentamento.PARCELA_CENTRAL:
            return prod_local

        # 2. Detectar se √© pent√°gono (se n√£o foi passado)
        if eh_pentagono is False:
            grau = len(list(G.neighbors(tile)))
            eh_pentagono = (grau == 5)

        # 3. Obter vizinhos ordenados por dire√ß√£o
        vizinhos_com_direcao = []
        for vizinho in G.neighbors(tile):
            direcao = G[tile][vizinho].get('direcao')
            if direcao:
                vizinhos_com_direcao.append((direcao, vizinho))

        # Ordenar por dire√ß√£o alfab√©tica (ex: N1, N2, ..., S1, S2, ...)
        vizinhos_com_direcao.sort(key=lambda x: x[0])
        vizinhos = [v for _, v in vizinhos_com_direcao]

        # 4. Verificar se o √≠ndice da parcela √© v√°lido
        max_parcelas = 5 if eh_pentagono else 6
        if indice_parcela > max_parcelas:
            return 0.0  # Inv√°lido

        # Ajustar √≠ndice: parcelas perif√©ricas 1‚Äì5/6 ‚Üí √≠ndices 0‚Äì4/5 na lista
        idx_vizinho = (indice_parcela - 1) % len(vizinhos)  # Evita erro se houver menos vizinhos

        try:
            vizinho = vizinhos[idx_vizinho]
            bioma_vizinho = G.nodes[vizinho]['bioma']
            prod_vizinho = prod_base.get(bioma_vizinho, 0.0)
            return (prod_local + prod_vizinho) / 2.0
        except (IndexError, KeyError):
            return prod_local / 2.0  # Fallback seguro

    def atualizar_produtividade(self, mundo):
        """
        Atualiza o coeficiente de produtividade do assentamento com base no mundo atual.
        Chamado ao criar ou ao avan√ßar turno.
        """
        self.coef_produtividade = self.calcular_produtividade_parcela(
            mundo,
            self.coordenadas_tile,
            self.indice_parcela,
            self.eh_pentagono
        )

    def get_producao_real(self):
        """
        Calcula a produ√ß√£o real do assentamento em unidades de recurso.
        F√≥rmula:
            produ√ß√£o = coef_produtividade √ó coef_nutricao √ó coef_eficiencia_tecnica √ó trabalho_total

        Onde:
            trabalho_total = (homens √ó 4) + (mulheres √ó fator_mulheres)

        Por padr√£o:
            - fator_mulheres = 0 (mulheres s√£o reprodutoras, n√£o trabalham)
            - Isso pode mudar com pol√≠ticas, tecnologias ou escolhas do jogador no futuro.

        Coeficientes futuros:
            - coef_nutricao: afeta produtividade por escassez ou abund√¢ncia de alimentos
            - coef_eficiencia_tecnica: melhoria por tecnologia, organiza√ß√£o social, etc.
        """
        if self.coef_produtividade == 0.0:
            return 0.0  # Evita c√°lculo se n√£o foi inicializado

        # üîß For√ßa de trabalho atual
        trabalho_homens = self.homens * 4

        # üö∫ Por padr√£o, mulheres N√ÉO trabalham (s√£o reprodutoras)
        trabalho_mulheres = 0  # ‚úÖ Padr√£o atual: mulheres n√£o trabalham

        # üîÆ PLACEHOLDER: Sistema futuro para liberar trabalho feminino
        # Ex: tecnologia "Agricultura Coletiva" ou pol√≠tica "Igualdade de G√™nero"
        # if self.civilizacao.tem_tecnologia("Trabalho Inclusivo") or self.assentamento.politica == "igualdade":
        #     trabalho_mulheres = self.mulheres * 2  # ou *3, ou *4

        trabalho_total = trabalho_homens + trabalho_mulheres

        # üîÆ PLACEHOLDERS PARA COEFICIENTES FUTUROS
        coef_nutricao = 1.0  # Futuro: din√¢mico com base em estoque, clima, eventos
        coef_eficiencia_tecnica = 1.0  # Futuro: tecnologia, upgrades, pol√≠ticas

        return self.coef_produtividade * coef_nutricao * coef_eficiencia_tecnica * trabalho_total

    def __repr__(self):
        return (f"Assentamento({self.nome}, Tile={self.coordenadas_tile}, "
                f"Parcela={self.indice_parcela}, Tipo={self.get_tipo_tile()}, "
                f"Coef={self.coef_produtividade:.1f}, Prod={self.get_producao_real():.1f}, "
                f"H={self.homens}, M={self.mulheres}, Total={self.get_populacao_total()})")